<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<tx:annotation-driven />
	<annotation-driven />
	<context:component-scan base-package="com.monyLady.myapp" />




	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- spring AOP -->
	<aop:aspectj-autoproxy />
	





	<!-- bean for send mail -->
	<beans:bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" />
		<beans:property name="username" value="hayatt.bechir@gmail.com" />
		<beans:property name="password" value="ahkooxoh" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.debug">true</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory
				</beans:prop>
				<beans:prop key="mail.mime.charset">UTF-8</beans:prop>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>


	<!-- this is a template message that we can pre-load with default state -->
	<beans:bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
		<beans:property name="from" value="customerservice@mycompany.com" />
		<beans:property name="subject" value="Your order" />

	</beans:bean>






	<!-- beans:bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean"> 
		<beans:property name="velocityProperties"> <beans:props> <beans:prop key="resource.loader">class</beans:prop> 
		<beans:prop key="class.resource.loader.class"> org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader 
		</beans:prop> </beans:props> </beans:property> </beans:bean -->




	<!-- data source -->


	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/monylady" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="password" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.monyLady.myapp.model.Person</beans:value>
				<beans:value>com.monyLady.myapp.model.Category</beans:value>
				<beans:value>com.monyLady.myapp.model.Customer</beans:value>
				<beans:value>com.monyLady.myapp.model.ItemsOrdered</beans:value>
				<beans:value>com.monyLady.myapp.model.Message</beans:value>
				<beans:value>com.monyLady.myapp.model.Orders</beans:value>
				<beans:value>com.monyLady.myapp.model.Product</beans:value>
				<beans:value>com.monyLady.myapp.model.ProductsInWishList
				</beans:value>
				<beans:value>com.monyLady.myapp.model.Review</beans:value>
				<beans:value>com.monyLady.myapp.model.SalesTax</beans:value>
				<beans:value>com.monyLady.myapp.model.SecurityQuestion</beans:value>
				<beans:value>com.monyLady.myapp.model.ServiceCase</beans:value>
				<beans:value>com.monyLady.myapp.model.Subcategory</beans:value>
				<beans:value>com.monyLady.myapp.model.Users</beans:value>
				<beans:value>com.monyLady.myapp.model.WishList</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>



	<!-- bean for transaction -->

	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>



	<!-- THYMELEAF: Template Resolver for email templates -->
	<beans:bean id="emailTemplateResolver"
		class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
		<beans:property name="prefix" value="templates/" />
		<beans:property name="suffix" value=".html" />
		<beans:property name="templateMode" value="HTML5" />
		<beans:property name="characterEncoding" value="UTF-8" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- THYMELEAF: Template Resolver for webapp pages -->
	<!-- (we would not need this if our app was not web) -->
	<beans:bean id="webTemplateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<beans:property name="prefix" value="/WEB-INF/templates/" />
		<beans:property name="templateMode" value="HTML5" />
		<beans:property name="characterEncoding" value="UTF-8" />
		<beans:property name="order" value="2" />
	</beans:bean>

	<!-- THYMELEAF: Template Engine (Spring3-specific version) -->
	<beans:bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<beans:property name="templateResolvers">
			<beans:set>
				<beans:ref bean="emailTemplateResolver" />
				<beans:ref bean="webTemplateResolver" />
			</beans:set>
		</beans:property>
	</beans:bean>

	<!-- THYMELEAF: View Resolver - implementation of Spring's ViewResolver 
		interface -->
	<!-- (we would not need this if our app was not web) -->
	<beans:bean id="viewResolver"
		class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
		<beans:property name="templateEngine" ref="templateEngine" />
		<beans:property name="characterEncoding" value="UTF-8" />
	</beans:bean>





</beans:beans>
